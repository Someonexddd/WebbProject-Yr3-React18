{"ast":null,"code":"// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\nimport { Log } from './Log.js';\nimport { CheckSessionIFrame } from './CheckSessionIFrame.js';\nimport { Global } from './Global.js';\nexport class SessionMonitor {\n  constructor(userManager) {\n    let CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CheckSessionIFrame;\n    let timer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Global.timer;\n\n    if (!userManager) {\n      Log.error(\"SessionMonitor.ctor: No user manager passed to SessionMonitor\");\n      throw new Error(\"userManager\");\n    }\n\n    this._userManager = userManager;\n    this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;\n    this._timer = timer;\n\n    this._userManager.events.addUserLoaded(this._start.bind(this));\n\n    this._userManager.events.addUserUnloaded(this._stop.bind(this));\n\n    Promise.resolve(this._userManager.getUser().then(user => {\n      // doing this manually here since calling getUser \n      // doesn't trigger load event.\n      if (user) {\n        this._start(user);\n      } else if (this._settings.monitorAnonymousSession) {\n        this._userManager.querySessionStatus().then(session => {\n          let tmpUser = {\n            session_state: session.session_state\n          };\n\n          if (session.sub && session.sid) {\n            tmpUser.profile = {\n              sub: session.sub,\n              sid: session.sid\n            };\n          }\n\n          this._start(tmpUser);\n        }).catch(err => {\n          // catch to suppress errors since we're in a ctor\n          Log.error(\"SessionMonitor ctor: error from querySessionStatus:\", err.message);\n        });\n      }\n    }).catch(err => {\n      // catch to suppress errors since we're in a ctor\n      Log.error(\"SessionMonitor ctor: error from getUser:\", err.message);\n    }));\n  }\n\n  get _settings() {\n    return this._userManager.settings;\n  }\n\n  get _metadataService() {\n    return this._userManager.metadataService;\n  }\n\n  get _client_id() {\n    return this._settings.client_id;\n  }\n\n  get _checkSessionInterval() {\n    return this._settings.checkSessionInterval;\n  }\n\n  get _stopCheckSessionOnError() {\n    return this._settings.stopCheckSessionOnError;\n  }\n\n  _start(user) {\n    let session_state = user.session_state;\n\n    if (session_state) {\n      if (user.profile) {\n        this._sub = user.profile.sub;\n        this._sid = user.profile.sid;\n        Log.debug(\"SessionMonitor._start: session_state:\", session_state, \", sub:\", this._sub);\n      } else {\n        this._sub = undefined;\n        this._sid = undefined;\n        Log.debug(\"SessionMonitor._start: session_state:\", session_state, \", anonymous user\");\n      }\n\n      if (!this._checkSessionIFrame) {\n        this._metadataService.getCheckSessionIframe().then(url => {\n          if (url) {\n            Log.debug(\"SessionMonitor._start: Initializing check session iframe\");\n            let client_id = this._client_id;\n            let interval = this._checkSessionInterval;\n            let stopOnError = this._stopCheckSessionOnError;\n            this._checkSessionIFrame = new this._CheckSessionIFrameCtor(this._callback.bind(this), client_id, url, interval, stopOnError);\n\n            this._checkSessionIFrame.load().then(() => {\n              this._checkSessionIFrame.start(session_state);\n            });\n          } else {\n            Log.warn(\"SessionMonitor._start: No check session iframe found in the metadata\");\n          }\n        }).catch(err => {\n          // catch to suppress errors since we're in non-promise callback\n          Log.error(\"SessionMonitor._start: Error from getCheckSessionIframe:\", err.message);\n        });\n      } else {\n        this._checkSessionIFrame.start(session_state);\n      }\n    }\n  }\n\n  _stop() {\n    this._sub = undefined;\n    this._sid = undefined;\n\n    if (this._checkSessionIFrame) {\n      Log.debug(\"SessionMonitor._stop\");\n\n      this._checkSessionIFrame.stop();\n    }\n\n    if (this._settings.monitorAnonymousSession) {\n      // using a timer to delay re-initialization to avoid race conditions during signout\n      let timerHandle = this._timer.setInterval(() => {\n        this._timer.clearInterval(timerHandle);\n\n        this._userManager.querySessionStatus().then(session => {\n          let tmpUser = {\n            session_state: session.session_state\n          };\n\n          if (session.sub && session.sid) {\n            tmpUser.profile = {\n              sub: session.sub,\n              sid: session.sid\n            };\n          }\n\n          this._start(tmpUser);\n        }).catch(err => {\n          // catch to suppress errors since we're in a callback\n          Log.error(\"SessionMonitor: error from querySessionStatus:\", err.message);\n        });\n      }, 1000);\n    }\n  }\n\n  _callback() {\n    this._userManager.querySessionStatus().then(session => {\n      var raiseEvent = true;\n\n      if (session) {\n        if (session.sub === this._sub) {\n          raiseEvent = false;\n\n          this._checkSessionIFrame.start(session.session_state);\n\n          if (session.sid === this._sid) {\n            Log.debug(\"SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:\", session.session_state);\n          } else {\n            Log.debug(\"SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:\", session.session_state);\n\n            this._userManager.events._raiseUserSessionChanged();\n          }\n        } else {\n          Log.debug(\"SessionMonitor._callback: Different subject signed into OP:\", session.sub);\n        }\n      } else {\n        Log.debug(\"SessionMonitor._callback: Subject no longer signed into OP\");\n      }\n\n      if (raiseEvent) {\n        if (this._sub) {\n          Log.debug(\"SessionMonitor._callback: SessionMonitor._callback; raising signed out event\");\n\n          this._userManager.events._raiseUserSignedOut();\n        } else {\n          Log.debug(\"SessionMonitor._callback: SessionMonitor._callback; raising signed in event\");\n\n          this._userManager.events._raiseUserSignedIn();\n        }\n      }\n    }).catch(err => {\n      if (this._sub) {\n        Log.debug(\"SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event\", err.message);\n\n        this._userManager.events._raiseUserSignedOut();\n      }\n    });\n  }\n\n}","map":{"version":3,"names":["Log","CheckSessionIFrame","Global","SessionMonitor","constructor","userManager","CheckSessionIFrameCtor","timer","error","Error","_userManager","_CheckSessionIFrameCtor","_timer","events","addUserLoaded","_start","bind","addUserUnloaded","_stop","Promise","resolve","getUser","then","user","_settings","monitorAnonymousSession","querySessionStatus","session","tmpUser","session_state","sub","sid","profile","catch","err","message","settings","_metadataService","metadataService","_client_id","client_id","_checkSessionInterval","checkSessionInterval","_stopCheckSessionOnError","stopCheckSessionOnError","_sub","_sid","debug","undefined","_checkSessionIFrame","getCheckSessionIframe","url","interval","stopOnError","_callback","load","start","warn","stop","timerHandle","setInterval","clearInterval","raiseEvent","_raiseUserSessionChanged","_raiseUserSignedOut","_raiseUserSignedIn"],"sources":["C:/Users/theoj/Desktop/WebbProject-Yr3-React18/ClientApp/node_modules/oidc-client/src/SessionMonitor.js"],"sourcesContent":["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Log } from './Log.js';\r\nimport { CheckSessionIFrame } from './CheckSessionIFrame.js';\r\nimport { Global } from './Global.js';\r\n\r\nexport class SessionMonitor {\r\n\r\n    constructor(userManager, CheckSessionIFrameCtor = CheckSessionIFrame, timer = Global.timer) {\r\n        if (!userManager) {\r\n            Log.error(\"SessionMonitor.ctor: No user manager passed to SessionMonitor\");\r\n            throw new Error(\"userManager\");\r\n        }\r\n\r\n        this._userManager = userManager;\r\n        this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;\r\n        this._timer = timer;\r\n\r\n        this._userManager.events.addUserLoaded(this._start.bind(this));\r\n        this._userManager.events.addUserUnloaded(this._stop.bind(this));\r\n\r\n        Promise.resolve(this._userManager.getUser().then(user => {\r\n            // doing this manually here since calling getUser \r\n            // doesn't trigger load event.\r\n            if (user) {\r\n                this._start(user);\r\n            }\r\n            else if (this._settings.monitorAnonymousSession) {\r\n                this._userManager.querySessionStatus().then(session => {\r\n                    let tmpUser = {\r\n                        session_state : session.session_state\r\n                    };\r\n                    if (session.sub && session.sid) {\r\n                        tmpUser.profile = {\r\n                            sub: session.sub,\r\n                            sid: session.sid\r\n                        };\r\n                    }\r\n                    this._start(tmpUser);\r\n                })\r\n                .catch(err => {\r\n                    // catch to suppress errors since we're in a ctor\r\n                    Log.error(\"SessionMonitor ctor: error from querySessionStatus:\", err.message);\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            // catch to suppress errors since we're in a ctor\r\n            Log.error(\"SessionMonitor ctor: error from getUser:\", err.message);\r\n        }));\r\n    }\r\n\r\n    get _settings() {\r\n        return this._userManager.settings;\r\n    }\r\n    get _metadataService() {\r\n        return this._userManager.metadataService;\r\n    }\r\n    get _client_id() {\r\n        return this._settings.client_id;\r\n    }\r\n    get _checkSessionInterval() {\r\n        return this._settings.checkSessionInterval;\r\n    }\r\n    get _stopCheckSessionOnError() {\r\n        return this._settings.stopCheckSessionOnError;\r\n    }\r\n\r\n    _start(user) {\r\n        let session_state = user.session_state;\r\n\r\n        if (session_state) {\r\n            if (user.profile) {\r\n                this._sub = user.profile.sub;\r\n                this._sid = user.profile.sid;\r\n                Log.debug(\"SessionMonitor._start: session_state:\", session_state, \", sub:\", this._sub);\r\n            }\r\n            else {\r\n                this._sub = undefined;\r\n                this._sid = undefined;\r\n                Log.debug(\"SessionMonitor._start: session_state:\", session_state, \", anonymous user\");\r\n            }\r\n\r\n            if (!this._checkSessionIFrame) {\r\n                this._metadataService.getCheckSessionIframe().then(url => {\r\n                    if (url) {\r\n                        Log.debug(\"SessionMonitor._start: Initializing check session iframe\")\r\n\r\n                        let client_id = this._client_id;\r\n                        let interval = this._checkSessionInterval;\r\n                        let stopOnError = this._stopCheckSessionOnError;\r\n\r\n                        this._checkSessionIFrame = new this._CheckSessionIFrameCtor(this._callback.bind(this), client_id, url, interval, stopOnError);\r\n                        this._checkSessionIFrame.load().then(() => {\r\n                            this._checkSessionIFrame.start(session_state);\r\n                        });\r\n                    }\r\n                    else {\r\n                        Log.warn(\"SessionMonitor._start: No check session iframe found in the metadata\");\r\n                    }\r\n                }).catch(err => {\r\n                    // catch to suppress errors since we're in non-promise callback\r\n                    Log.error(\"SessionMonitor._start: Error from getCheckSessionIframe:\", err.message);\r\n                });\r\n            }\r\n            else {\r\n                this._checkSessionIFrame.start(session_state);\r\n            }\r\n        }\r\n    }\r\n\r\n    _stop() {\r\n        this._sub = undefined;\r\n        this._sid = undefined;\r\n\r\n        if (this._checkSessionIFrame) {\r\n            Log.debug(\"SessionMonitor._stop\");\r\n            this._checkSessionIFrame.stop();\r\n        }\r\n\r\n        if (this._settings.monitorAnonymousSession) {\r\n            // using a timer to delay re-initialization to avoid race conditions during signout\r\n            let timerHandle = this._timer.setInterval(()=>{\r\n                this._timer.clearInterval(timerHandle);\r\n\r\n                this._userManager.querySessionStatus().then(session => {\r\n                    let tmpUser = {\r\n                        session_state : session.session_state\r\n                    };\r\n                    if (session.sub && session.sid) {\r\n                        tmpUser.profile = {\r\n                            sub: session.sub,\r\n                            sid: session.sid\r\n                        };\r\n                    }\r\n                    this._start(tmpUser);\r\n                })\r\n                .catch(err => {\r\n                    // catch to suppress errors since we're in a callback\r\n                    Log.error(\"SessionMonitor: error from querySessionStatus:\", err.message);\r\n                });\r\n\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    _callback() {\r\n        this._userManager.querySessionStatus().then(session => {\r\n            var raiseEvent = true;\r\n\r\n            if (session) {\r\n                if (session.sub === this._sub) {\r\n                    raiseEvent = false;\r\n                    this._checkSessionIFrame.start(session.session_state);\r\n\r\n                    if (session.sid === this._sid) {\r\n                        Log.debug(\"SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:\", session.session_state);\r\n                    }\r\n                    else {\r\n                        Log.debug(\"SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:\", session.session_state);\r\n                        this._userManager.events._raiseUserSessionChanged();\r\n                    }\r\n                }\r\n                else {\r\n                    Log.debug(\"SessionMonitor._callback: Different subject signed into OP:\", session.sub);\r\n                }\r\n            }\r\n            else {\r\n                Log.debug(\"SessionMonitor._callback: Subject no longer signed into OP\");\r\n            }\r\n\r\n            if (raiseEvent) {\r\n                if (this._sub) {\r\n                    Log.debug(\"SessionMonitor._callback: SessionMonitor._callback; raising signed out event\");\r\n                    this._userManager.events._raiseUserSignedOut();\r\n                }\r\n                else {\r\n                    Log.debug(\"SessionMonitor._callback: SessionMonitor._callback; raising signed in event\");\r\n                    this._userManager.events._raiseUserSignedIn();\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            if (this._sub) {\r\n                Log.debug(\"SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event\", err.message);\r\n                this._userManager.events._raiseUserSignedOut();\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}