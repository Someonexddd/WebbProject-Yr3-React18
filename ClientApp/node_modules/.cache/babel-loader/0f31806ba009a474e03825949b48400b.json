{"ast":null,"code":"// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\nimport { Log } from './Log.js';\nimport { JsonService } from './JsonService.js';\nconst OidcMetadataUrlPath = '.well-known/openid-configuration';\nexport class MetadataService {\n  constructor(settings) {\n    let JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : JsonService;\n\n    if (!settings) {\n      Log.error(\"MetadataService: No settings passed to MetadataService\");\n      throw new Error(\"settings\");\n    }\n\n    this._settings = settings;\n    this._jsonService = new JsonServiceCtor(['application/jwk-set+json']);\n  }\n\n  get metadataUrl() {\n    if (!this._metadataUrl) {\n      if (this._settings.metadataUrl) {\n        this._metadataUrl = this._settings.metadataUrl;\n      } else {\n        this._metadataUrl = this._settings.authority;\n\n        if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {\n          if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {\n            this._metadataUrl += '/';\n          }\n\n          this._metadataUrl += OidcMetadataUrlPath;\n        }\n      }\n    }\n\n    return this._metadataUrl;\n  }\n\n  resetSigningKeys() {\n    this._settings = this._settings || {};\n    this._settings.signingKeys = undefined;\n  }\n\n  getMetadata() {\n    if (this._settings.metadata) {\n      Log.debug(\"MetadataService.getMetadata: Returning metadata from settings\");\n      return Promise.resolve(this._settings.metadata);\n    }\n\n    if (!this.metadataUrl) {\n      Log.error(\"MetadataService.getMetadata: No authority or metadataUrl configured on settings\");\n      return Promise.reject(new Error(\"No authority or metadataUrl configured on settings\"));\n    }\n\n    Log.debug(\"MetadataService.getMetadata: getting metadata from\", this.metadataUrl);\n    return this._jsonService.getJson(this.metadataUrl).then(metadata => {\n      Log.debug(\"MetadataService.getMetadata: json received\");\n      var seed = this._settings.metadataSeed || {};\n      this._settings.metadata = Object.assign({}, seed, metadata);\n      return this._settings.metadata;\n    });\n  }\n\n  getIssuer() {\n    return this._getMetadataProperty(\"issuer\");\n  }\n\n  getAuthorizationEndpoint() {\n    return this._getMetadataProperty(\"authorization_endpoint\");\n  }\n\n  getUserInfoEndpoint() {\n    return this._getMetadataProperty(\"userinfo_endpoint\");\n  }\n\n  getTokenEndpoint() {\n    let optional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this._getMetadataProperty(\"token_endpoint\", optional);\n  }\n\n  getCheckSessionIframe() {\n    return this._getMetadataProperty(\"check_session_iframe\", true);\n  }\n\n  getEndSessionEndpoint() {\n    return this._getMetadataProperty(\"end_session_endpoint\", true);\n  }\n\n  getRevocationEndpoint() {\n    return this._getMetadataProperty(\"revocation_endpoint\", true);\n  }\n\n  getKeysEndpoint() {\n    return this._getMetadataProperty(\"jwks_uri\", true);\n  }\n\n  _getMetadataProperty(name) {\n    let optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    Log.debug(\"MetadataService.getMetadataProperty for: \" + name);\n    return this.getMetadata().then(metadata => {\n      Log.debug(\"MetadataService.getMetadataProperty: metadata recieved\");\n\n      if (metadata[name] === undefined) {\n        if (optional === true) {\n          Log.warn(\"MetadataService.getMetadataProperty: Metadata does not contain optional property \" + name);\n          return undefined;\n        } else {\n          Log.error(\"MetadataService.getMetadataProperty: Metadata does not contain property \" + name);\n          throw new Error(\"Metadata does not contain property \" + name);\n        }\n      }\n\n      return metadata[name];\n    });\n  }\n\n  getSigningKeys() {\n    if (this._settings.signingKeys) {\n      Log.debug(\"MetadataService.getSigningKeys: Returning signingKeys from settings\");\n      return Promise.resolve(this._settings.signingKeys);\n    }\n\n    return this._getMetadataProperty(\"jwks_uri\").then(jwks_uri => {\n      Log.debug(\"MetadataService.getSigningKeys: jwks_uri received\", jwks_uri);\n      return this._jsonService.getJson(jwks_uri).then(keySet => {\n        Log.debug(\"MetadataService.getSigningKeys: key set received\", keySet);\n\n        if (!keySet.keys) {\n          Log.error(\"MetadataService.getSigningKeys: Missing keys on keyset\");\n          throw new Error(\"Missing keys on keyset\");\n        }\n\n        this._settings.signingKeys = keySet.keys;\n        return this._settings.signingKeys;\n      });\n    });\n  }\n\n}","map":{"version":3,"names":["Log","JsonService","OidcMetadataUrlPath","MetadataService","constructor","settings","JsonServiceCtor","error","Error","_settings","_jsonService","metadataUrl","_metadataUrl","authority","indexOf","length","resetSigningKeys","signingKeys","undefined","getMetadata","metadata","debug","Promise","resolve","reject","getJson","then","seed","metadataSeed","Object","assign","getIssuer","_getMetadataProperty","getAuthorizationEndpoint","getUserInfoEndpoint","getTokenEndpoint","optional","getCheckSessionIframe","getEndSessionEndpoint","getRevocationEndpoint","getKeysEndpoint","name","warn","getSigningKeys","jwks_uri","keySet","keys"],"sources":["C:/Users/theoj/Desktop/WebbProject-Yr3-React18/ClientApp/node_modules/oidc-client/src/MetadataService.js"],"sourcesContent":["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Log } from './Log.js';\r\nimport { JsonService } from './JsonService.js';\r\n\r\nconst OidcMetadataUrlPath = '.well-known/openid-configuration';\r\n\r\nexport class MetadataService {\r\n    constructor(settings, JsonServiceCtor = JsonService) {\r\n        if (!settings) {\r\n            Log.error(\"MetadataService: No settings passed to MetadataService\");\r\n            throw new Error(\"settings\");\r\n        }\r\n\r\n        this._settings = settings;\r\n        this._jsonService = new JsonServiceCtor(['application/jwk-set+json']);\r\n    }\r\n\r\n    get metadataUrl() {\r\n        if (!this._metadataUrl) {\r\n            if (this._settings.metadataUrl) {\r\n                this._metadataUrl = this._settings.metadataUrl;\r\n            }\r\n            else {\r\n                this._metadataUrl = this._settings.authority;\r\n\r\n                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {\r\n                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {\r\n                        this._metadataUrl += '/';\r\n                    }\r\n                    this._metadataUrl += OidcMetadataUrlPath;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._metadataUrl;\r\n    }\r\n\r\n    resetSigningKeys() {\r\n        this._settings = this._settings || {}\r\n        this._settings.signingKeys = undefined\r\n    }\r\n\r\n    getMetadata() {\r\n        if (this._settings.metadata) {\r\n            Log.debug(\"MetadataService.getMetadata: Returning metadata from settings\");\r\n            return Promise.resolve(this._settings.metadata);\r\n        }\r\n\r\n        if (!this.metadataUrl) {\r\n            Log.error(\"MetadataService.getMetadata: No authority or metadataUrl configured on settings\");\r\n            return Promise.reject(new Error(\"No authority or metadataUrl configured on settings\"));\r\n        }\r\n\r\n        Log.debug(\"MetadataService.getMetadata: getting metadata from\", this.metadataUrl);\r\n\r\n        return this._jsonService.getJson(this.metadataUrl)\r\n            .then(metadata => {\r\n                Log.debug(\"MetadataService.getMetadata: json received\");\r\n                \r\n                var seed = this._settings.metadataSeed || {};\r\n                this._settings.metadata = Object.assign({}, seed, metadata);\r\n                return this._settings.metadata;\r\n            });\r\n    }\r\n\r\n    getIssuer() {\r\n        return this._getMetadataProperty(\"issuer\");\r\n    }\r\n\r\n    getAuthorizationEndpoint() {\r\n        return this._getMetadataProperty(\"authorization_endpoint\");\r\n    }\r\n\r\n    getUserInfoEndpoint() {\r\n        return this._getMetadataProperty(\"userinfo_endpoint\");\r\n    }\r\n\r\n    getTokenEndpoint(optional=true) {\r\n        return this._getMetadataProperty(\"token_endpoint\", optional);\r\n    }\r\n\r\n    getCheckSessionIframe() {\r\n        return this._getMetadataProperty(\"check_session_iframe\", true);\r\n    }\r\n\r\n    getEndSessionEndpoint() {\r\n        return this._getMetadataProperty(\"end_session_endpoint\", true);\r\n    }\r\n\r\n    getRevocationEndpoint() {\r\n        return this._getMetadataProperty(\"revocation_endpoint\", true);\r\n    }\r\n\r\n    getKeysEndpoint() {\r\n        return this._getMetadataProperty(\"jwks_uri\", true);\r\n    }\r\n\r\n    _getMetadataProperty(name, optional=false) {\r\n        Log.debug(\"MetadataService.getMetadataProperty for: \" + name);\r\n\r\n        return this.getMetadata().then(metadata => {\r\n            Log.debug(\"MetadataService.getMetadataProperty: metadata recieved\");\r\n\r\n            if (metadata[name] === undefined) {\r\n\r\n                if (optional === true) {\r\n                    Log.warn(\"MetadataService.getMetadataProperty: Metadata does not contain optional property \" + name);\r\n                    return undefined;\r\n                }\r\n                else {\r\n                    Log.error(\"MetadataService.getMetadataProperty: Metadata does not contain property \" + name);\r\n                    throw new Error(\"Metadata does not contain property \" + name);\r\n                }\r\n            }\r\n\r\n            return metadata[name];\r\n        });\r\n    }\r\n\r\n    getSigningKeys() {\r\n        if (this._settings.signingKeys) {\r\n            Log.debug(\"MetadataService.getSigningKeys: Returning signingKeys from settings\");\r\n            return Promise.resolve(this._settings.signingKeys);\r\n        }\r\n\r\n        return this._getMetadataProperty(\"jwks_uri\").then(jwks_uri => {\r\n            Log.debug(\"MetadataService.getSigningKeys: jwks_uri received\", jwks_uri);\r\n\r\n            return this._jsonService.getJson(jwks_uri).then(keySet => {\r\n                Log.debug(\"MetadataService.getSigningKeys: key set received\", keySet);\r\n\r\n                if (!keySet.keys) {\r\n                    Log.error(\"MetadataService.getSigningKeys: Missing keys on keyset\");\r\n                    throw new Error(\"Missing keys on keyset\");\r\n                }\r\n\r\n                this._settings.signingKeys = keySet.keys;\r\n                return this._settings.signingKeys;\r\n            });\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}