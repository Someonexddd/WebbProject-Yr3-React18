{"ast":null,"code":"// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\nimport { Log } from './Log.js';\nimport { Global } from './Global.js';\nexport class JsonService {\n  constructor() {\n    let additionalContentTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Global.XMLHttpRequest;\n    let jwtHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (additionalContentTypes && Array.isArray(additionalContentTypes)) {\n      this._contentTypes = additionalContentTypes.slice();\n    } else {\n      this._contentTypes = [];\n    }\n\n    this._contentTypes.push('application/json');\n\n    if (jwtHandler) {\n      this._contentTypes.push('application/jwt');\n    }\n\n    this._XMLHttpRequest = XMLHttpRequestCtor;\n    this._jwtHandler = jwtHandler;\n  }\n\n  getJson(url, token) {\n    if (!url) {\n      Log.error(\"JsonService.getJson: No url passed\");\n      throw new Error(\"url\");\n    }\n\n    Log.debug(\"JsonService.getJson, url: \", url);\n    return new Promise((resolve, reject) => {\n      var req = new this._XMLHttpRequest();\n      req.open('GET', url);\n      var allowedContentTypes = this._contentTypes;\n      var jwtHandler = this._jwtHandler;\n\n      req.onload = function () {\n        Log.debug(\"JsonService.getJson: HTTP response received, status\", req.status);\n\n        if (req.status === 200) {\n          var contentType = req.getResponseHeader(\"Content-Type\");\n\n          if (contentType) {\n            var found = allowedContentTypes.find(item => {\n              if (contentType.startsWith(item)) {\n                return true;\n              }\n            });\n\n            if (found == \"application/jwt\") {\n              jwtHandler(req).then(resolve, reject);\n              return;\n            }\n\n            if (found) {\n              try {\n                resolve(JSON.parse(req.responseText));\n                return;\n              } catch (e) {\n                Log.error(\"JsonService.getJson: Error parsing JSON response\", e.message);\n                reject(e);\n                return;\n              }\n            }\n          }\n\n          reject(Error(\"Invalid response Content-Type: \" + contentType + \", from URL: \" + url));\n        } else {\n          reject(Error(req.statusText + \" (\" + req.status + \")\"));\n        }\n      };\n\n      req.onerror = function () {\n        Log.error(\"JsonService.getJson: network error\");\n        reject(Error(\"Network Error\"));\n      };\n\n      if (token) {\n        Log.debug(\"JsonService.getJson: token passed, setting Authorization header\");\n        req.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      }\n\n      req.send();\n    });\n  }\n\n  postForm(url, payload, basicAuth) {\n    if (!url) {\n      Log.error(\"JsonService.postForm: No url passed\");\n      throw new Error(\"url\");\n    }\n\n    Log.debug(\"JsonService.postForm, url: \", url);\n    return new Promise((resolve, reject) => {\n      var req = new this._XMLHttpRequest();\n      req.open('POST', url);\n      var allowedContentTypes = this._contentTypes;\n\n      req.onload = function () {\n        Log.debug(\"JsonService.postForm: HTTP response received, status\", req.status);\n\n        if (req.status === 200) {\n          var contentType = req.getResponseHeader(\"Content-Type\");\n\n          if (contentType) {\n            var found = allowedContentTypes.find(item => {\n              if (contentType.startsWith(item)) {\n                return true;\n              }\n            });\n\n            if (found) {\n              try {\n                resolve(JSON.parse(req.responseText));\n                return;\n              } catch (e) {\n                Log.error(\"JsonService.postForm: Error parsing JSON response\", e.message);\n                reject(e);\n                return;\n              }\n            }\n          }\n\n          reject(Error(\"Invalid response Content-Type: \" + contentType + \", from URL: \" + url));\n          return;\n        }\n\n        if (req.status === 400) {\n          var contentType = req.getResponseHeader(\"Content-Type\");\n\n          if (contentType) {\n            var found = allowedContentTypes.find(item => {\n              if (contentType.startsWith(item)) {\n                return true;\n              }\n            });\n\n            if (found) {\n              try {\n                var payload = JSON.parse(req.responseText);\n\n                if (payload && payload.error) {\n                  Log.error(\"JsonService.postForm: Error from server: \", payload.error);\n                  reject(new Error(payload.error));\n                  return;\n                }\n              } catch (e) {\n                Log.error(\"JsonService.postForm: Error parsing JSON response\", e.message);\n                reject(e);\n                return;\n              }\n            }\n          }\n        }\n\n        reject(Error(req.statusText + \" (\" + req.status + \")\"));\n      };\n\n      req.onerror = function () {\n        Log.error(\"JsonService.postForm: network error\");\n        reject(Error(\"Network Error\"));\n      };\n\n      let body = \"\";\n\n      for (let key in payload) {\n        let value = payload[key];\n\n        if (value) {\n          if (body.length > 0) {\n            body += \"&\";\n          }\n\n          body += encodeURIComponent(key);\n          body += \"=\";\n          body += encodeURIComponent(value);\n        }\n      }\n\n      req.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n      if (basicAuth !== undefined) {\n        req.setRequestHeader(\"Authorization\", \"Basic \" + btoa(basicAuth));\n      }\n\n      req.send(body);\n    });\n  }\n\n}","map":{"version":3,"names":["Log","Global","JsonService","constructor","additionalContentTypes","XMLHttpRequestCtor","XMLHttpRequest","jwtHandler","Array","isArray","_contentTypes","slice","push","_XMLHttpRequest","_jwtHandler","getJson","url","token","error","Error","debug","Promise","resolve","reject","req","open","allowedContentTypes","onload","status","contentType","getResponseHeader","found","find","item","startsWith","then","JSON","parse","responseText","e","message","statusText","onerror","setRequestHeader","send","postForm","payload","basicAuth","body","key","value","length","encodeURIComponent","undefined","btoa"],"sources":["C:/Users/theoj/Desktop/WebbProject-Yr3-React18/ClientApp/node_modules/oidc-client/src/JsonService.js"],"sourcesContent":["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Log } from './Log.js';\r\nimport { Global } from './Global.js';\r\n\r\nexport class JsonService {\r\n    constructor(\r\n        additionalContentTypes = null, \r\n        XMLHttpRequestCtor = Global.XMLHttpRequest, \r\n        jwtHandler = null\r\n    ) {\r\n        if (additionalContentTypes && Array.isArray(additionalContentTypes))\r\n        {\r\n            this._contentTypes = additionalContentTypes.slice();\r\n        }\r\n        else\r\n        {\r\n            this._contentTypes = [];\r\n        }\r\n        this._contentTypes.push('application/json');\r\n        if (jwtHandler) {\r\n            this._contentTypes.push('application/jwt');\r\n        }\r\n\r\n        this._XMLHttpRequest = XMLHttpRequestCtor;\r\n        this._jwtHandler = jwtHandler;\r\n    }\r\n\r\n    getJson(url, token) {\r\n        if (!url){\r\n            Log.error(\"JsonService.getJson: No url passed\");\r\n            throw new Error(\"url\");\r\n        }\r\n\r\n        Log.debug(\"JsonService.getJson, url: \", url);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            var req = new this._XMLHttpRequest();\r\n            req.open('GET', url);\r\n\r\n            var allowedContentTypes = this._contentTypes;\r\n            var jwtHandler = this._jwtHandler;\r\n\r\n            req.onload = function() {\r\n                Log.debug(\"JsonService.getJson: HTTP response received, status\", req.status);\r\n\r\n                if (req.status === 200) {\r\n\r\n                    var contentType = req.getResponseHeader(\"Content-Type\");\r\n                    if (contentType) {\r\n\r\n                        var found = allowedContentTypes.find(item=>{\r\n                            if (contentType.startsWith(item)) {\r\n                                return true;\r\n                            }\r\n                        });\r\n\r\n                        if (found == \"application/jwt\") {\r\n                            jwtHandler(req).then(resolve, reject);\r\n                            return;\r\n                        }\r\n\r\n                        if (found) {\r\n                            try {\r\n                                resolve(JSON.parse(req.responseText));\r\n                                return;\r\n                            }\r\n                            catch (e) {\r\n                                Log.error(\"JsonService.getJson: Error parsing JSON response\", e.message);\r\n                                reject(e);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    reject(Error(\"Invalid response Content-Type: \" + contentType + \", from URL: \" + url));\r\n                }\r\n                else {\r\n                    reject(Error(req.statusText + \" (\" + req.status + \")\"));\r\n                }\r\n            };\r\n\r\n            req.onerror = function() {\r\n                Log.error(\"JsonService.getJson: network error\");\r\n                reject(Error(\"Network Error\"));\r\n            };\r\n\r\n            if (token) {\r\n                Log.debug(\"JsonService.getJson: token passed, setting Authorization header\");\r\n                req.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n            }\r\n\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    postForm(url, payload, basicAuth) {\r\n        if (!url){\r\n            Log.error(\"JsonService.postForm: No url passed\");\r\n            throw new Error(\"url\");\r\n        }\r\n\r\n        Log.debug(\"JsonService.postForm, url: \", url);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            var req = new this._XMLHttpRequest();\r\n            req.open('POST', url);\r\n\r\n            var allowedContentTypes = this._contentTypes;\r\n\r\n            req.onload = function() {\r\n                Log.debug(\"JsonService.postForm: HTTP response received, status\", req.status);\r\n\r\n                if (req.status === 200) {\r\n\r\n                    var contentType = req.getResponseHeader(\"Content-Type\");\r\n                    if (contentType) {\r\n\r\n                        var found = allowedContentTypes.find(item=>{\r\n                            if (contentType.startsWith(item)) {\r\n                                return true;\r\n                            }\r\n                        });\r\n\r\n                        if (found) {\r\n                            try {\r\n                                resolve(JSON.parse(req.responseText));\r\n                                return;\r\n                            }\r\n                            catch (e) {\r\n                                Log.error(\"JsonService.postForm: Error parsing JSON response\", e.message);\r\n                                reject(e);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    reject(Error(\"Invalid response Content-Type: \" + contentType + \", from URL: \" + url));\r\n                    return;\r\n                }\r\n\r\n                if (req.status === 400) {\r\n\r\n                    var contentType = req.getResponseHeader(\"Content-Type\");\r\n                    if (contentType) {\r\n\r\n                        var found = allowedContentTypes.find(item=>{\r\n                            if (contentType.startsWith(item)) {\r\n                                return true;\r\n                            }\r\n                        });\r\n\r\n                        if (found) {\r\n                            try {\r\n                                var payload = JSON.parse(req.responseText);\r\n                                if (payload && payload.error) {\r\n                                    Log.error(\"JsonService.postForm: Error from server: \", payload.error);\r\n                                    reject(new Error(payload.error));\r\n                                    return;\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                Log.error(\"JsonService.postForm: Error parsing JSON response\", e.message);\r\n                                reject(e);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                reject(Error(req.statusText + \" (\" + req.status + \")\"));\r\n            };\r\n\r\n            req.onerror = function() {\r\n                Log.error(\"JsonService.postForm: network error\");\r\n                reject(Error(\"Network Error\"));\r\n            };\r\n\r\n            let body = \"\";\r\n            for(let key in payload) {\r\n\r\n                let value = payload[key];\r\n\r\n                if (value) {\r\n\r\n                    if (body.length > 0) {\r\n                        body += \"&\";\r\n                    }\r\n\r\n                    body += encodeURIComponent(key);\r\n                    body += \"=\";\r\n                    body += encodeURIComponent(value);\r\n                }\r\n            }\r\n\r\n            req.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n            if (basicAuth !== undefined)\r\n            {\r\n                req.setRequestHeader(\"Authorization\", \"Basic \" + btoa(basicAuth));\r\n            }\r\n\r\n            req.send(body);\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}