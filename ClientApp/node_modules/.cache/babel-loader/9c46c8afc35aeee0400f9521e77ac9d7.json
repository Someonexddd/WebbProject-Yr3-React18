{"ast":null,"code":"// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\nimport { JsonService } from './JsonService.js';\nimport { MetadataService } from './MetadataService.js';\nimport { Log } from './Log.js';\nexport class TokenClient {\n  constructor(settings) {\n    let JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : JsonService;\n    let MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MetadataService;\n\n    if (!settings) {\n      Log.error(\"TokenClient.ctor: No settings passed\");\n      throw new Error(\"settings\");\n    }\n\n    this._settings = settings;\n    this._jsonService = new JsonServiceCtor();\n    this._metadataService = new MetadataServiceCtor(this._settings);\n  }\n\n  exchangeCode() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    args = Object.assign({}, args);\n    args.grant_type = args.grant_type || \"authorization_code\";\n    args.client_id = args.client_id || this._settings.client_id;\n    args.client_secret = args.client_secret || this._settings.client_secret;\n    args.redirect_uri = args.redirect_uri || this._settings.redirect_uri;\n    var basicAuth = undefined;\n    var client_authentication = args._client_authentication || this._settings._client_authentication;\n    delete args._client_authentication;\n\n    if (!args.code) {\n      Log.error(\"TokenClient.exchangeCode: No code passed\");\n      return Promise.reject(new Error(\"A code is required\"));\n    }\n\n    if (!args.redirect_uri) {\n      Log.error(\"TokenClient.exchangeCode: No redirect_uri passed\");\n      return Promise.reject(new Error(\"A redirect_uri is required\"));\n    }\n\n    if (!args.code_verifier) {\n      Log.error(\"TokenClient.exchangeCode: No code_verifier passed\");\n      return Promise.reject(new Error(\"A code_verifier is required\"));\n    }\n\n    if (!args.client_id) {\n      Log.error(\"TokenClient.exchangeCode: No client_id passed\");\n      return Promise.reject(new Error(\"A client_id is required\"));\n    }\n\n    if (!args.client_secret && client_authentication == \"client_secret_basic\") {\n      Log.error(\"TokenClient.exchangeCode: No client_secret passed\");\n      return Promise.reject(new Error(\"A client_secret is required\"));\n    } // Sending the client credentials using the Basic Auth method\n\n\n    if (client_authentication == \"client_secret_basic\") {\n      basicAuth = args.client_id + ':' + args.client_secret;\n      delete args.client_id;\n      delete args.client_secret;\n    }\n\n    return this._metadataService.getTokenEndpoint(false).then(url => {\n      Log.debug(\"TokenClient.exchangeCode: Received token endpoint\");\n      return this._jsonService.postForm(url, args, basicAuth).then(response => {\n        Log.debug(\"TokenClient.exchangeCode: response received\");\n        return response;\n      });\n    });\n  }\n\n  exchangeRefreshToken() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    args = Object.assign({}, args);\n    args.grant_type = args.grant_type || \"refresh_token\";\n    args.client_id = args.client_id || this._settings.client_id;\n    args.client_secret = args.client_secret || this._settings.client_secret;\n    var basicAuth = undefined;\n    var client_authentication = args._client_authentication || this._settings._client_authentication;\n    delete args._client_authentication;\n\n    if (!args.refresh_token) {\n      Log.error(\"TokenClient.exchangeRefreshToken: No refresh_token passed\");\n      return Promise.reject(new Error(\"A refresh_token is required\"));\n    }\n\n    if (!args.client_id) {\n      Log.error(\"TokenClient.exchangeRefreshToken: No client_id passed\");\n      return Promise.reject(new Error(\"A client_id is required\"));\n    } // Sending the client credentials using the Basic Auth method\n\n\n    if (client_authentication == \"client_secret_basic\") {\n      basicAuth = args.client_id + ':' + args.client_secret;\n      delete args.client_id;\n      delete args.client_secret;\n    }\n\n    return this._metadataService.getTokenEndpoint(false).then(url => {\n      Log.debug(\"TokenClient.exchangeRefreshToken: Received token endpoint\");\n      return this._jsonService.postForm(url, args, basicAuth).then(response => {\n        Log.debug(\"TokenClient.exchangeRefreshToken: response received\");\n        return response;\n      });\n    });\n  }\n\n}","map":{"version":3,"names":["JsonService","MetadataService","Log","TokenClient","constructor","settings","JsonServiceCtor","MetadataServiceCtor","error","Error","_settings","_jsonService","_metadataService","exchangeCode","args","Object","assign","grant_type","client_id","client_secret","redirect_uri","basicAuth","undefined","client_authentication","_client_authentication","code","Promise","reject","code_verifier","getTokenEndpoint","then","url","debug","postForm","response","exchangeRefreshToken","refresh_token"],"sources":["C:/Users/theoj/Desktop/WebbProject-Yr3-React18/ClientApp/node_modules/oidc-client/src/TokenClient.js"],"sourcesContent":["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { JsonService } from './JsonService.js';\r\nimport { MetadataService } from './MetadataService.js';\r\nimport { Log } from './Log.js';\r\n\r\nexport class TokenClient {\r\n    constructor(settings, JsonServiceCtor = JsonService, MetadataServiceCtor = MetadataService) {\r\n        if (!settings) {\r\n            Log.error(\"TokenClient.ctor: No settings passed\");\r\n            throw new Error(\"settings\");\r\n        }\r\n\r\n        this._settings = settings;\r\n        this._jsonService = new JsonServiceCtor();\r\n        this._metadataService = new MetadataServiceCtor(this._settings);\r\n    }\r\n\r\n    exchangeCode(args = {}) {\r\n        args = Object.assign({}, args);\r\n\r\n        args.grant_type = args.grant_type || \"authorization_code\";\r\n        args.client_id = args.client_id || this._settings.client_id;\r\n        args.client_secret = args.client_secret || this._settings.client_secret;\r\n        args.redirect_uri = args.redirect_uri || this._settings.redirect_uri;\r\n\r\n        var basicAuth = undefined;\r\n        var client_authentication = args._client_authentication || this._settings._client_authentication;\r\n        delete args._client_authentication;\r\n\r\n        if (!args.code) {\r\n            Log.error(\"TokenClient.exchangeCode: No code passed\");\r\n            return Promise.reject(new Error(\"A code is required\"));\r\n        }\r\n        if (!args.redirect_uri) {\r\n            Log.error(\"TokenClient.exchangeCode: No redirect_uri passed\");\r\n            return Promise.reject(new Error(\"A redirect_uri is required\"));\r\n        }\r\n        if (!args.code_verifier) {\r\n            Log.error(\"TokenClient.exchangeCode: No code_verifier passed\");\r\n            return Promise.reject(new Error(\"A code_verifier is required\"));\r\n        }\r\n        if (!args.client_id) {\r\n            Log.error(\"TokenClient.exchangeCode: No client_id passed\");\r\n            return Promise.reject(new Error(\"A client_id is required\"));\r\n        }\r\n        if (!args.client_secret && client_authentication == \"client_secret_basic\") {\r\n            Log.error(\"TokenClient.exchangeCode: No client_secret passed\");\r\n            return Promise.reject(new Error(\"A client_secret is required\"));\r\n        }\r\n\r\n        // Sending the client credentials using the Basic Auth method\r\n        if(client_authentication == \"client_secret_basic\")\r\n        {\r\n            basicAuth = args.client_id + ':' + args.client_secret;\r\n            delete args.client_id;\r\n            delete args.client_secret;\r\n        }\r\n\r\n        return this._metadataService.getTokenEndpoint(false).then(url => {\r\n            Log.debug(\"TokenClient.exchangeCode: Received token endpoint\");\r\n            return this._jsonService.postForm(url, args, basicAuth).then(response => {\r\n                Log.debug(\"TokenClient.exchangeCode: response received\");\r\n                return response;\r\n            });\r\n        });\r\n    }\r\n\r\n    exchangeRefreshToken(args = {}) {\r\n        args = Object.assign({}, args);\r\n\r\n        args.grant_type = args.grant_type || \"refresh_token\";\r\n        args.client_id = args.client_id || this._settings.client_id;\r\n        args.client_secret = args.client_secret || this._settings.client_secret;\r\n\r\n        var basicAuth = undefined;\r\n        var client_authentication = args._client_authentication || this._settings._client_authentication;\r\n        delete args._client_authentication;\r\n\r\n        if (!args.refresh_token) {\r\n            Log.error(\"TokenClient.exchangeRefreshToken: No refresh_token passed\");\r\n            return Promise.reject(new Error(\"A refresh_token is required\"));\r\n        }\r\n        if (!args.client_id) {\r\n            Log.error(\"TokenClient.exchangeRefreshToken: No client_id passed\");\r\n            return Promise.reject(new Error(\"A client_id is required\"));\r\n        }\r\n\r\n        // Sending the client credentials using the Basic Auth method\r\n        if(client_authentication == \"client_secret_basic\")\r\n        {\r\n            basicAuth = args.client_id + ':' + args.client_secret;\r\n            delete args.client_id;\r\n            delete args.client_secret;\r\n        }\r\n\r\n        return this._metadataService.getTokenEndpoint(false).then(url => {\r\n            Log.debug(\"TokenClient.exchangeRefreshToken: Received token endpoint\");\r\n\r\n            return this._jsonService.postForm(url, args, basicAuth).then(response => {\r\n                Log.debug(\"TokenClient.exchangeRefreshToken: response received\");\r\n                return response;\r\n            });\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}