{"ast":null,"code":"// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\nimport { Log } from './Log.js';\nimport { MetadataService } from './MetadataService.js';\nimport { Global } from './Global.js';\nconst AccessTokenTypeHint = \"access_token\";\nconst RefreshTokenTypeHint = \"refresh_token\";\nexport class TokenRevocationClient {\n  constructor(settings) {\n    let XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Global.XMLHttpRequest;\n    let MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MetadataService;\n\n    if (!settings) {\n      Log.error(\"TokenRevocationClient.ctor: No settings provided\");\n      throw new Error(\"No settings provided.\");\n    }\n\n    this._settings = settings;\n    this._XMLHttpRequestCtor = XMLHttpRequestCtor;\n    this._metadataService = new MetadataServiceCtor(this._settings);\n  }\n\n  revoke(token, required) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"access_token\";\n\n    if (!token) {\n      Log.error(\"TokenRevocationClient.revoke: No token provided\");\n      throw new Error(\"No token provided.\");\n    }\n\n    if (type !== AccessTokenTypeHint && type != RefreshTokenTypeHint) {\n      Log.error(\"TokenRevocationClient.revoke: Invalid token type\");\n      throw new Error(\"Invalid token type.\");\n    }\n\n    return this._metadataService.getRevocationEndpoint().then(url => {\n      if (!url) {\n        if (required) {\n          Log.error(\"TokenRevocationClient.revoke: Revocation not supported\");\n          throw new Error(\"Revocation not supported\");\n        } // not required, so don't error and just return\n\n\n        return;\n      }\n\n      Log.debug(\"TokenRevocationClient.revoke: Revoking \" + type);\n      var client_id = this._settings.client_id;\n      var client_secret = this._settings.client_secret;\n      return this._revoke(url, client_id, client_secret, token, type);\n    });\n  }\n\n  _revoke(url, client_id, client_secret, token, type) {\n    return new Promise((resolve, reject) => {\n      var xhr = new this._XMLHttpRequestCtor();\n      xhr.open(\"POST\", url);\n\n      xhr.onload = () => {\n        Log.debug(\"TokenRevocationClient.revoke: HTTP response received, status\", xhr.status);\n\n        if (xhr.status === 200) {\n          resolve();\n        } else {\n          reject(Error(xhr.statusText + \" (\" + xhr.status + \")\"));\n        }\n      };\n\n      xhr.onerror = () => {\n        Log.debug(\"TokenRevocationClient.revoke: Network Error.\");\n        reject(\"Network Error\");\n      };\n\n      var body = \"client_id=\" + encodeURIComponent(client_id);\n\n      if (client_secret) {\n        body += \"&client_secret=\" + encodeURIComponent(client_secret);\n      }\n\n      body += \"&token_type_hint=\" + encodeURIComponent(type);\n      body += \"&token=\" + encodeURIComponent(token);\n      xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n      xhr.send(body);\n    });\n  }\n\n}","map":{"version":3,"names":["Log","MetadataService","Global","AccessTokenTypeHint","RefreshTokenTypeHint","TokenRevocationClient","constructor","settings","XMLHttpRequestCtor","XMLHttpRequest","MetadataServiceCtor","error","Error","_settings","_XMLHttpRequestCtor","_metadataService","revoke","token","required","type","getRevocationEndpoint","then","url","debug","client_id","client_secret","_revoke","Promise","resolve","reject","xhr","open","onload","status","statusText","onerror","body","encodeURIComponent","setRequestHeader","send"],"sources":["C:/Users/theoj/Desktop/WebbProject-Yr3-React18/ClientApp/node_modules/oidc-client/src/TokenRevocationClient.js"],"sourcesContent":["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Log } from './Log.js';\r\nimport { MetadataService } from './MetadataService.js';\r\nimport { Global } from './Global.js';\r\n\r\nconst AccessTokenTypeHint = \"access_token\";\r\nconst RefreshTokenTypeHint = \"refresh_token\";\r\n\r\nexport class TokenRevocationClient {\r\n    constructor(settings, XMLHttpRequestCtor = Global.XMLHttpRequest, MetadataServiceCtor = MetadataService) {\r\n        if (!settings) {\r\n            Log.error(\"TokenRevocationClient.ctor: No settings provided\");\r\n            throw new Error(\"No settings provided.\");\r\n        }\r\n\r\n        this._settings = settings;\r\n        this._XMLHttpRequestCtor = XMLHttpRequestCtor;\r\n        this._metadataService = new MetadataServiceCtor(this._settings);\r\n    }\r\n\r\n    revoke(token, required, type = \"access_token\") {\r\n        if (!token) {\r\n            Log.error(\"TokenRevocationClient.revoke: No token provided\");\r\n            throw new Error(\"No token provided.\");\r\n        }\r\n\r\n        if (type !== AccessTokenTypeHint && type != RefreshTokenTypeHint) {\r\n            Log.error(\"TokenRevocationClient.revoke: Invalid token type\");\r\n            throw new Error(\"Invalid token type.\");\r\n        }\r\n\r\n        return this._metadataService.getRevocationEndpoint().then(url => {\r\n            if (!url) {\r\n                if (required) {\r\n                    Log.error(\"TokenRevocationClient.revoke: Revocation not supported\");\r\n                    throw new Error(\"Revocation not supported\");\r\n                }\r\n\r\n                // not required, so don't error and just return\r\n                return;\r\n            }\r\n\r\n            Log.debug(\"TokenRevocationClient.revoke: Revoking \" + type);\r\n            var client_id = this._settings.client_id;\r\n            var client_secret = this._settings.client_secret;\r\n            return this._revoke(url, client_id, client_secret, token, type);\r\n        });\r\n    }\r\n\r\n    _revoke(url, client_id, client_secret, token, type) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            var xhr = new this._XMLHttpRequestCtor();\r\n            xhr.open(\"POST\", url);\r\n\r\n            xhr.onload = () => {\r\n                Log.debug(\"TokenRevocationClient.revoke: HTTP response received, status\", xhr.status);\r\n\r\n                if (xhr.status === 200) {\r\n                    resolve();\r\n                }\r\n                else {\r\n                    reject(Error(xhr.statusText + \" (\" + xhr.status + \")\"));\r\n                }\r\n            };\r\n            xhr.onerror = () => { \r\n                Log.debug(\"TokenRevocationClient.revoke: Network Error.\")\r\n                reject(\"Network Error\");\r\n            };\r\n\r\n            var body = \"client_id=\" + encodeURIComponent(client_id);\r\n            if (client_secret) {\r\n                body += \"&client_secret=\" + encodeURIComponent(client_secret);\r\n            }\r\n            body += \"&token_type_hint=\" + encodeURIComponent(type);\r\n            body += \"&token=\" + encodeURIComponent(token);\r\n\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            xhr.send(body);\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}